/**
 * Any copyright is dedicated to the Public Domain.
 * http://creativecommons.org/publicdomain/zero/1.0/
 */

importScripts("helpers_worker.js");

onmessage = function(event) {
  const name = location.pathname;

  var autoincrement = [true, false];
  var keypath = [false, true, "missing", "invalid"];
  var method = ["put", "add"];
  var explicit = [true, false, undefined, "invalid"];
  var existing = [true, false];

  var db = indexedDBSync.open(name, 1, function(trans, oldVersion) {

    for (var incrIndex in autoincrement) {
      for (var pathIndex in keypath) {
        for (var methodIndex in method) {
          for (var explicitIndex in explicit) {
            for (var existIndex  in existing) {
              var speccedNoKey = (keypath[pathIndex] == false ||
                                  keypath[pathIndex] == "missing") &&
                                 !explicit[explicitIndex];

              // We can't do 'existing' checks if we use autogenerated key
              if (speccedNoKey && autoincrement[incrIndex] && existing[existIndex]) {
                continue;
              }

              // Create store
              if (trans.db.objectStoreNames.contains("mystore")) {
                trans.db.deleteObjectStore("mystore");
              }

              var store = trans.db.createObjectStore("mystore",
                               { autoIncrement: autoincrement[incrIndex],
                                 keyPath: (keypath[pathIndex] ? "id" : null) });

              test = " for test " + JSON.stringify({ autoincrement: autoincrement[incrIndex],
                                                     keypath: keypath[pathIndex],
                                                     method: method[methodIndex],
                                                     explicit: explicit[explicitIndex] === undefined ? "undefined" : explicit[explicitIndex],
                                                     existing: existing[existIndex] });

              var result;
              // Insert "existing" data if needed
              if (existing[existIndex]) {
                if (keypath[pathIndex]) {
                  result = store.add({ existing: "data", id: 5 });
                }
                else {
                  result = store.add({ existing: "data" }, 5);
                }
                is(result, 5, "inserted correct key" + test);
              }

              // Set up value to be inserted
              var value = { theObj: true };
              if (keypath[pathIndex] === true) {
                value.id = 5;
              }
              else if (keypath[pathIndex] === "invalid") {
                value.id = /x/;
              }

              // Which arguments are passed to function
              args = [value];
              if (explicit[explicitIndex] === true) {
                args.push(5);
              }
              else if (explicit[explicitIndex] === undefined) {
                args.push(undefined);
              }
              else if (explicit[explicitIndex] === "invalid") {
                args.push(/x/);
              }

              var expected = expectedResult(method[methodIndex],
                                            keypath[pathIndex],
                                            explicit[explicitIndex],
                                            autoincrement[incrIndex],
                                            existing[existIndex]);

              var valueJSON = JSON.stringify(value);

              info("making call" + test);

              // Make function call for throwing functions
              if (expected === "throw") {
                try {
                  store[method[methodIndex]].apply(store, args);
                  ok(false, "should have thrown" + test);
                }
                catch (ex) {
                  ok(true, "did throw" + test);
                  ok(ex instanceof DOMException, "Got a DOMException" + test);
                  is(ex.name, "DataError", "expect a DataError" + test);
                  is(ex.code, 0, "expect zero" + test);
                  is(JSON.stringify(value), valueJSON, "call didn't modify value" + test);
                }
                continue;
              }

              // Make non-throwing function call

              // Check result
              if (expected === "error") {
                try {
                  var request = store[method[methodIndex]].apply(store, args);
                  ok(false, "write should fail" + test);
                }
                catch(e)
                {
                  ok(true, "write failed" + test);
                }
                continue;
              }

              try {
                var request = store[method[methodIndex]].apply(store, args);
                ok(true, "Write succeeded" + test);
                is(JSON.stringify(value), valueJSON, "Call didn't modify value" + test);

                // Figure out what key we used
                var key = 5;
                if (autoincrement[incrIndex] && speccedNoKey) {
                  key = 1;
                }

                // Adjust value if expected
                if (autoincrement[incrIndex] && keypath[pathIndex] && speccedNoKey) {
                  value.id = key;
                }

                is(request, key, "Write should return correct key" + test);

                try {
                  var request = store.get(key);
                  ok(true, "Read back succeed" + test);
                  is(JSON.stringify(request), JSON.stringify(value),
                     "Read back returned correct value" + test);
                }
                catch(e)
                {
                  ok(false, "Read back should succeed" + test);
                }
              }
              catch(ex)
              {
                ok(false, "Write should succeed" + test);
              }
            }
          }
        }
      }
    }
  });


  function expectedResult(method, keypath, explicit, autoincrement, existing) {
    if (keypath && explicit)
      return "throw";
    if (!keypath && !explicit && !autoincrement)
      return "throw";
    if (keypath == "invalid")
      return "throw";
    if (keypath == "missing" && !autoincrement)
      return "throw";
    if (explicit == "invalid")
      return "throw";

    if (method == "add" && existing)
      return "error";

    return "success";
  }

  info("Test successfully completed");
  postMessage(undefined);
};
