<?xml version="1.0"?>

<!-- This Source Code Form is subject to the terms of the Mozilla Public
   - License, v. 2.0. If a copy of the MPL was not distributed with this
   - file, You can obtain one at http://mozilla.org/MPL/2.0/. -->

<bindings id="firefoxBrowserBindings"
          xmlns="http://www.mozilla.org/xbl"
          xmlns:xul="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul">

  <binding id="remote-browser" extends="chrome://global/content/bindings/browser.xml#browser">

    <implementation type="application/javascript" implements="nsIAccessibleProvider, nsIObserver, nsIDOMEventListener, nsIMessageListener">

      <field name="_jsParentUtils">null</field>

      <property name="jsParentUtils">
        <getter>
          <![CDATA[
            if (this._jsParentUtils)
              return this._jsParentUtils;

            this._jsParentUtils = this.boxObject.QueryInterface(Components.interfaces.nsIContainerBoxObject).jsParent;
            return this._jsParentUtils;
          ]]>
        </getter>
      </property>

      <property name="isRemoteBrowser"
                onget="return (this.getAttribute('remote') == 'true');"
                readonly="true"/>

      <field name="_securityUI">null</field>

      <property name="securityUI"
                readonly="true">
      <getter>
        <![CDATA[
          if (this._securityUI)
            return this._securityUI;
          this._securityUI = new SSLStatusProvider(this);
          return this._securityUI;
        ]]>
      </getter>
      </property>

      <property name="webNavigation"
                onget="return this._remoteWebNavigation;"
                readonly="true"/>

      <field name="_remoteWebProgress">null</field>

      <property name="webProgress"
                readonly="true">
    	<getter>
    	  <![CDATA[
          if (this.isRemoteBrowser) {
            if (!this._remoteWebProgress)
              this._remoteWebProgress = new RemoteWebProgress(this);
            return this._remoteWebProgress;
          } else {
            return this.docShell.QueryInterface(Components.interfaces.nsIInterfaceRequestor).getInterface(Components.interfaces.nsIWebProgress);
    	    }
    	  ]]>
    	</getter>
      </property>

      <field name="outerContentWindowId">null</field>
      <field name="innerContentWindowId">null</field>

      <field name="_contentTitle">null</field>

      <property name="contentTitle"
                onget="return this._contentTitle"
                readonly="true"/>

      <field name="_contentWindow">null</field>

      <property name="contentWindow"
                onget="return this._contentWindow"
                readonly="true"/>

      <property name="contentDocument"
                onget="return this.contentWindow ? this.contentWindow.document : null"
                readonly="true"/>

      <field name="_characterSet">null</field>

      <property name="characterSet"
                onget="return this._characterSet"
                readonly="true"/>

      <constructor>
        <![CDATA[
          this.messageManager.loadFrameScript("chrome://browser/content/browser-child.js", true);
          this.messageManager.addMessageListener("DOMTitleChanged", this._messageListener);
          this.webProgress._init();
        ]]>
      </constructor>

      <field name="_messageListener"><![CDATA[
        ({
          self: this,
          receiveMessage: function receiveMessage(aMessage) {
            let self = this.self;
            let json = aMessage.json;

            switch (aMessage.name) {
              case "DOMTitleChanged":
                self._contentTitle = json.title;
                break;
            }
          }
        })
      ]]></field>

    </implementation>

  </binding>

</bindings>
